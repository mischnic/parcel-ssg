diff --git a/node_modules/@mischnic/parcel-resolver-root/index.js b/node_modules/@mischnic/parcel-resolver-root/index.js
index e2e0d9e..22f3486 100644
--- a/node_modules/@mischnic/parcel-resolver-root/index.js
+++ b/node_modules/@mischnic/parcel-resolver-root/index.js
@@ -1,31 +1,22 @@
 // @flow
 
 /*::
-
-import type {
-  Resolver as ResolverType,
-  FileCreateInvalidation,
-  FilePath,
-} from "@parcel/types";
-
+import type {FileCreateInvalidation, FilePath} from '@parcel/types';
 */
 
 const path = require("path");
+const invariant = require("assert");
+const nullthrows = require("nullthrows");
+
 const { Resolver } = require("@parcel/plugin");
 const { default: NodeResolver } = require("@parcel/node-resolver-core");
 const { loadConfig, validateSchema } = require("@parcel/utils");
 const { encodeJSONKeyComponent } = require("@parcel/diagnostic");
 
-// Throw user friendly errors on special webpack loader syntax
-// ex. `imports-loader?$=jquery!./example.js`
-const WEBPACK_IMPORT_REGEX = /\S+-loader\S*!\S+/g;
-
 module.exports = (new Resolver({
   async resolve({ dependency, options, specifier }) {
-    if (WEBPACK_IMPORT_REGEX.test(dependency.specifier)) {
-      throw new Error(
-        `The import path: ${dependency.specifier} is using webpack specific loader import syntax, which isn't supported by Parcel.`
-      );
+    if (specifier[0] !== "/" && specifier[0] !== "~") {
+      return;
     }
 
     // -------------------- MODIFIED --------------------
@@ -40,7 +31,9 @@ module.exports = (new Resolver({
         for (let [k, v] of rewrites) {
           if (specifier.startsWith(k)) {
             specifier = path.relative(
-              path.dirname(dependency.resolveFrom),
+              path.dirname(
+                nullthrows(dependency.resolveFrom ?? dependency.sourcePath)
+              ),
               path.join(v, specifier.slice(k.length))
             );
             if (!specifier.startsWith(".")) {
@@ -65,15 +58,17 @@ module.exports = (new Resolver({
       mainFields: ["source", "browser", "module", "main"],
     });
 
-    return resolver.resolve({
+    let result = await resolver.resolve({
       filename: specifier,
       specifierType: dependency.specifierType,
       parent: dependency.resolveFrom,
       env: dependency.env,
       sourcePath: dependency.sourcePath,
     });
+
+    return result;
   },
-}) /*: ResolverType */);
+}) /*: Resolver */);
 
 const NAME = "@mischnic/parcel-resolver-root";
 const CONFIG_SCHEMA = {
@@ -96,7 +91,12 @@ async function load(options, resolveFrom, inputFS) /*: Promise<{|
 |}> */ {
   let invalidateOnFileCreate = [],
     invalidateOnFileChange = [];
-  let result = await loadConfig(inputFS, resolveFrom, ["package.json"], options.projectRoot);
+  let result = await loadConfig(
+    inputFS,
+    resolveFrom,
+    ["package.json"],
+    options.projectRoot
+  );
   let config = result && result.config[NAME];
 
   if (result) {
@@ -112,7 +112,8 @@ async function load(options, resolveFrom, inputFS) /*: Promise<{|
     result = await loadConfig(
       inputFS,
       path.join(options.projectRoot, "index"),
-      ["package.json"]
+      ["package.json"],
+      options.projectRoot
     );
     config = result && result.config[NAME];
     if (!config) {
@@ -131,13 +132,15 @@ async function load(options, resolveFrom, inputFS) /*: Promise<{|
       };
     }
   }
+  invariant(result);
+  let files = result.files;
 
   validateSchema.diagnostic(
     CONFIG_SCHEMA,
     {
       data: config,
-      source: await inputFS.readFile(result.files[0].filePath, "utf8"),
-      filePath: result.files[0].filePath,
+      source: await inputFS.readFile(files[0].filePath, "utf8"),
+      filePath: files[0].filePath,
       prependKey: `/${encodeJSONKeyComponent(NAME)}`,
     },
     NAME,
@@ -151,7 +154,7 @@ async function load(options, resolveFrom, inputFS) /*: Promise<{|
     rewrites: new Map(
       entries.map(([k, v]) => [
         k,
-        path.resolve(path.dirname(result.files[0].filePath), v),
+        path.resolve(path.dirname(files[0].filePath), v),
       ])
     ),
     invalidateOnFileChange,
